// Code generated by MockGen. DO NOT EDIT.
// Source: database/database.go

// Package mock_database is a generated GoMock package.
package mock_database

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockSQLiteCreator is a mock of SQLiteCreator interface.
type MockSQLiteCreator struct {
	ctrl     *gomock.Controller
	recorder *MockSQLiteCreatorMockRecorder
}

// MockSQLiteCreatorMockRecorder is the mock recorder for MockSQLiteCreator.
type MockSQLiteCreatorMockRecorder struct {
	mock *MockSQLiteCreator
}

// NewMockSQLiteCreator creates a new mock instance.
func NewMockSQLiteCreator(ctrl *gomock.Controller) *MockSQLiteCreator {
	mock := &MockSQLiteCreator{ctrl: ctrl}
	mock.recorder = &MockSQLiteCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSQLiteCreator) EXPECT() *MockSQLiteCreatorMockRecorder {
	return m.recorder
}

// OpenGorm mocks base method.
func (m *MockSQLiteCreator) OpenGorm(dialector gorm.Dialector, config *gorm.Config) (*gorm.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenGorm", dialector, config)
	ret0, _ := ret[0].(*gorm.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenGorm indicates an expected call of OpenGorm.
func (mr *MockSQLiteCreatorMockRecorder) OpenGorm(dialector, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenGorm", reflect.TypeOf((*MockSQLiteCreator)(nil).OpenGorm), dialector, config)
}

// OpenSQLite mocks base method.
func (m *MockSQLiteCreator) OpenSQLite(dsn string) gorm.Dialector {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenSQLite", dsn)
	ret0, _ := ret[0].(gorm.Dialector)
	return ret0
}

// OpenSQLite indicates an expected call of OpenSQLite.
func (mr *MockSQLiteCreatorMockRecorder) OpenSQLite(dsn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenSQLite", reflect.TypeOf((*MockSQLiteCreator)(nil).OpenSQLite), dsn)
}
